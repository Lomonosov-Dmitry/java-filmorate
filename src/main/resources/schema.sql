CREATE TABLE IF NOT EXISTS PUBLIC.GENRES (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT GENRE_PK PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.RATINGS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT RATING_PK PRIMARY KEY (ID)
);
CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING NOT NULL,
	DESCRIPTION CHARACTER LARGE OBJECT,
	RELEASEDATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	RATING_ID INTEGER,
	CONSTRAINT FILM_PK PRIMARY KEY (ID),
	CONSTRAINT FILM_RATING_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATINGS(ID)
);
CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRE (
	FILM INTEGER NOT NULL,
	GENRE INTEGER NOT NULL,
	CONSTRAINT FILM_GENRE_FILM_FK FOREIGN KEY (FILM) REFERENCES PUBLIC.FILMS(ID),
	CONSTRAINT FILM_GENRE_GENRE_FK FOREIGN KEY (GENRE) REFERENCES PUBLIC.GENRES(ID)
);
CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER VARYING NOT NULL,
	LOGIN CHARACTER VARYING NOT NULL,
	NAME CHARACTER VARYING,
	BIRTHDAY DATE,
	CONSTRAINT USER_PK PRIMARY KEY (ID)
);
CREATE TABLE IF NOT EXISTS PUBLIC.LIKES (
	FILM INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT LIKES_PK PRIMARY KEY (FILM,USER_ID),
	CONSTRAINT LIKES_FILM_FK FOREIGN KEY (FILM) REFERENCES PUBLIC.FILMS(ID),
	CONSTRAINT LIKES_USER_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(ID)
);
CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP (
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL,
	CONSTRAINT FRIENDSHIP_PK PRIMARY KEY (USER_ID,FRIEND_ID),
	CONSTRAINT FRIENDSHIP_USER_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(ID),
	CONSTRAINT FRIENDSHIP_USER_FK_1 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(ID)
);
